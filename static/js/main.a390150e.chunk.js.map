{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","App","componentDidMount","fetch","then","response","json","users","setState","catch","err","console","log","onSearchChange","event","searchField","target","value","state","filterRobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oOAYgBA,EAVH,SAACC,GACV,OACI,yBAAMC,UAAU,mDACZ,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,kBACNC,IAAI,UACN,4BAAKJ,EAAMK,MACnB,2BAAIL,EAAMM,SCgBEC,EArBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEIA,EAAOC,KAAK,SAACC,EAAKC,GACd,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIO,EAAKP,GACTE,KAAMK,EAAKL,KACXC,MAAOI,EAAKJ,aCAjBO,EAXU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACI,6BACI,2BAAOb,UAAU,gCACjBc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCqCPI,G,wDArCX,aAAc,IAAD,8BACT,gBAMJC,kBAAoB,WAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACjB,OAAQgB,OACrCE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAXjB,EAcbG,eAAiB,SAAAC,GACb,EAAKN,SAAS,CAACO,YAAaD,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACT3B,OAAQ,GACRwB,YAAa,IAJR,E,qDAkBZ,IAAD,OACUI,EAAeC,KAAKF,MAAM3B,OAAO8B,QAAQ,SAAAC,GAC3C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAEpE,OAAgC,IAA7BH,KAAKF,MAAM3B,OAAOkC,OACV,0CAGX,yBAAKzC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWa,aAAgBuB,KAAKP,iBAChC,kBAAC,EAAD,CAAUtB,OAAQ4B,S,GA/BZO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.a390150e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div  className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${props.id}\n            `}alt=\"robot\"></img>\n            <h2>{props.name}</h2>\n    <p>{props.email}</p>\n        </div>\n    )\n}\n export default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n            robots.map( (user,i) =>{ \n                return(\n                    <Card \n                    key={i}\n                    id={user.id}\n                    name={user.name} \n                    email={user.email}/>\n                )\n            } )\n\n            }\n            {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n            <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n            <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> */}\n        </div>\n    )\n}\n export default CardList;","import React from 'react'\n\nexport const SearchBox = ({ searchChange }) => {\n    return (\n        <div>\n            <input className='pa3 ba b--green bg-light-blue' \n            type=\"search\"\n            placeholder=\"search rebots\"\n            onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox","import React, { Component } from 'react'\nimport {robots} from './robots';\nimport CardList from './CardList';\nimport SearchBox from'./SearchBox';\nimport './App.css';\n\nclass App extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n    componentDidMount = () =>{\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n        .catch(err => console.log(err));\n    }\n\n    onSearchChange = event =>{\n        this.setState({searchField: event.target.value});\n    }\n    render()\n    {\n        const filterRobots = this.state.robots.filter( robot => {\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        });\n        if(this.state.robots.length === 0){\n            return <h1>Loading...</h1>\n        }else{\n            return (\n        <div className=\"tc\">\n            <h1>RoboFriends</h1>\n            <SearchBox searchChange = {this.onSearchChange}/>\n            <CardList robots={filterRobots}/>\n        </div>\n                    )\n            }\n    \n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n    <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}